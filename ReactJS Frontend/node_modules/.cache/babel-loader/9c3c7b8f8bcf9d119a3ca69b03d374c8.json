{"ast":null,"code":"var _jsxFileName = \"/Users/bulavkin/Developer/\\u0412\\u0435\\u0431-\\u0440\\u0430\\u0437\\u0440\\u0430\\u0431\\u043E\\u0442\\u043A\\u0430/\\u041A\\u0443\\u0440\\u0441\\u043E\\u0432\\u0430\\u044F \\u0440\\u0430\\u0431\\u043E\\u0442\\u0430 2023/ReactJS FrontEnd/src/components/ProtectedRoute.js\";\nimport { Route, Navigate } from \"react-router-dom\";\nimport AuthService from '../services/auth.service';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ProtectedRoute(_ref) {\n  let {\n    roles = [],\n    ...props\n  } = _ref;\n  const user = AuthService.getCurrentUser();\n\n  if (!user) {\n    // Если пользователь не авторизован, перенаправляем его на страницу входа\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 16\n    }, this);\n  }\n\n  if (roles.length && !roles.some(role => user.roles.includes(role))) {\n    // Если у маршрута есть ограничения по ролям, и у пользователя нет ни одной из них,\n    // перенаправляем его на страницу ошибки прав доступа\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/access-denied\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 16\n    }, this);\n  } // Если все проверки пройдены, рендерим маршрут\n\n\n  return /*#__PURE__*/_jsxDEV(Route, { ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 12\n  }, this);\n}\n\n_c = ProtectedRoute;\nexport default ProtectedRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["Route","Navigate","AuthService","ProtectedRoute","roles","props","user","getCurrentUser","length","some","role","includes"],"sources":["/Users/bulavkin/Developer/Веб-разработка/Курсовая работа 2023/ReactJS FrontEnd/src/components/ProtectedRoute.js"],"sourcesContent":["import { Route, Navigate } from \"react-router-dom\";\nimport AuthService from '../services/auth.service';\n\nfunction ProtectedRoute({ roles = [], ...props }) {\n    const user = AuthService.getCurrentUser();\n\n    if (!user) {\n        // Если пользователь не авторизован, перенаправляем его на страницу входа\n        return <Navigate to=\"/login\" />;\n    }\n\n    if (roles.length && !roles.some((role) => user.roles.includes(role))) {\n        // Если у маршрута есть ограничения по ролям, и у пользователя нет ни одной из них,\n        // перенаправляем его на страницу ошибки прав доступа\n        return <Navigate to=\"/access-denied\" />;\n    }\n\n    // Если все проверки пройдены, рендерим маршрут\n    return <Route {...props} />;\n}\n\nexport default ProtectedRoute;\n"],"mappings":";AAAA,SAASA,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AACA,OAAOC,WAAP,MAAwB,0BAAxB;;;AAEA,SAASC,cAAT,OAAkD;EAAA,IAA1B;IAAEC,KAAK,GAAG,EAAV;IAAc,GAAGC;EAAjB,CAA0B;EAC9C,MAAMC,IAAI,GAAGJ,WAAW,CAACK,cAAZ,EAAb;;EAEA,IAAI,CAACD,IAAL,EAAW;IACP;IACA,oBAAO,QAAC,QAAD;MAAU,EAAE,EAAC;IAAb;MAAA;MAAA;MAAA;IAAA,QAAP;EACH;;EAED,IAAIF,KAAK,CAACI,MAAN,IAAgB,CAACJ,KAAK,CAACK,IAAN,CAAYC,IAAD,IAAUJ,IAAI,CAACF,KAAL,CAAWO,QAAX,CAAoBD,IAApB,CAArB,CAArB,EAAsE;IAClE;IACA;IACA,oBAAO,QAAC,QAAD;MAAU,EAAE,EAAC;IAAb;MAAA;MAAA;MAAA;IAAA,QAAP;EACH,CAZ6C,CAc9C;;;EACA,oBAAO,QAAC,KAAD,OAAWL;EAAX;IAAA;IAAA;IAAA;EAAA,QAAP;AACH;;KAhBQF,c;AAkBT,eAAeA,cAAf"},"metadata":{},"sourceType":"module"}